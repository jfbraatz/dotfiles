;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode scheme-mode
      :tags 
        '( ("eval-when" code nil nil [1331 1400])
            ("if" code nil nil [1495 1569])
            ("make-prompt-tag" variable (:default-value ((1723 . 1779))) nil [1697 1779])
            ("default-prompt-tag" variable (:default-value ((1873 . 1962))) nil [1782 1962])
            ("call-with-prompt" function (:arguments ("tag" "thunk" "handler")) nil [1965 2041])
            (2043 2100)
            (2240 2270)
            ("let" code nil nil [2271 7025])
            ("map" variable (:default-value ((7192 . 7685))) nil [7178 7685])
            ("for-each" variable (:default-value ((7707 . 8222))) nil [7688 8222])
            ("primitive-load-path" code nil nil [8255 8288])
            (8640 8748)
            ("pk" variable (:default-value ("peek")) nil [8750 8765])
            (8768 8969)
            ("provide" function (:arguments ("sym")) nil [8994 9096])
            ("provided?" function (:arguments ("feature")) nil [9273 9337])
            (9362 9442)
            ("absolute-file-name?" function (:arguments ("file-name")) nil [9532 9575])
            ("and-map" function (:arguments ("f" "lst")) nil [10006 10189])
            ("or-map" function (:arguments ("f" "lst")) nil [10344 10500])
            ("format" variable (:default-value ("simple-format")) nil [10583 10611])
            ("string-any" variable (:default-value ((10732 . 11096))) nil [10711 11096])
            ("string-every" variable (:default-value ((11219 . 11589))) nil [11196 11589])
            ("substring-fill!" function (:arguments ("str" "start" "end" "fill")) nil [11655 11735])
            ("module-name" function (:arguments ("x")) nil [11828 11855])
            ("module-add!" function nil nil [11864 11950])
            ("module-define!" function nil nil [11952 12152])
            ("module-ref" function nil nil [12154 12296])
            ("module-generate-unique-id!" variable (:default-value ((12335 . 12438))) nil [12298 12438])
            ("module-gensym" variable (:default-value ("gensym")) nil [12440 12468])
            (12470 12507)
            (12536 12564)
            (12565 12590)
            (12591 12616)
            (12617 12642)
            (12643 12666)
            (12667 12699)
            (12700 12730)
            (12731 12760)
            ("primitive-load-path" code nil nil [12941 12980])
            ("define-syntax" code nil nil [13077 13247])
            ("define-syntax" code nil nil [13250 13431])
            ("include-from-path" code nil nil [13434 13472])
            ("define-syntax-rule" code nil nil [13475 13556])
            ("define-syntax-rule" code nil nil [13559 13648])
            ("define-syntax" code nil nil [13651 16137])
            ("define-syntax" code nil nil [16140 19994])
            ("define-syntax" code nil nil [19997 20497])
            (20644 20829)
            ("define-syntax" code nil nil [20831 23224])
            ("define-syntax-rule" code nil nil [23227 23291])
            ("define-syntax" code nil nil [23294 23459])
            ("define-syntax" code nil nil [23663 23959])
            ("define-syntax-rule" code nil nil [23962 24081])
            ("map" variable (:default-value ((24240 . 26709))) nil [24226 26709])
            ("map-in-order" variable (:default-value ("map")) nil [26712 26736])
            ("for-each" variable (:default-value ((26758 . 28942))) nil [26739 28942])
            ("define*" code nil nil [28995 29377])
            ("define*" code nil nil [29380 29785])
            ("define*" code nil nil [29788 30794])
            ("define*" code nil nil [30797 31688])
            ("define*" code nil nil [31691 32478])
            ("define*" code nil nil [32481 33230])
            ("define*" code nil nil [33233 33979])
            (34029 34063)
            ("let" code nil nil [34160 35596])
            ("let" code nil nil [35652 38530])
            ("define-syntax" code nil nil [38558 39397])
            ("define-syntax" code nil nil [39400 39751])
            (39754 39773)
            ("define-syntax" code nil nil [39801 39996])
            ("identity" function (:arguments ("x")) nil [40031 40053])
            (40056 40433)
            ("negate" function (:arguments ("proc")) nil [40435 40548])
            ("const" function (:arguments ("value")) nil [40595 40695])
            ("and=>" function (:arguments ("value" "procedure")) nil [40721 40818])
            ("call/cc" variable (:default-value ("call-with-current-continuation")) nil [40853 40899])
            ("define-syntax" code nil nil [40902 41602])
            ("make-object-property" function nil nil [42268 42476])
            ("symbol-property" function (:arguments ("sym" "prop")) nil [42937 43045])
            ("set-symbol-property!" function (:arguments ("sym" "prop" "val")) nil [43048 43243])
            ("symbol-property-remove!" function (:arguments ("sym" "prop")) nil [43246 43408])
            ("array-shape" function (:arguments ("a")) nil [43432 43549])
            ("kw-arg-ref" function (:arguments ("args" "kw")) nil [43642 43746])
            ("struct-layout" function (:arguments ("s")) nil [43771 43849])
            ("inherit-print-state" function (:arguments ("old-port" "new-port")) nil [44211 44373])
            ("record-type-vtable" variable (:default-value ((44448 . 44767))) nil [44419 44767])
            ("record-type?" function (:arguments ("obj")) nil [44770 44863])
            ("define*" code nil nil [44866 47559])
            ("record-type-name" function (:arguments ("obj")) nil [47562 47697])
            ("record-type-fields" function (:arguments ("obj")) nil [47700 47843])
            ("define*" code nil nil [47846 48303])
            ("record-predicate" function (:arguments ("rtd")) nil [48316 48413])
            (48416 48697)
            ("record-accessor" function (:arguments ("rtd" "field-name")) nil [48699 48995])
            ("record-modifier" function (:arguments ("rtd" "field-name")) nil [48998 49303])
            ("record?" function (:arguments ("obj")) nil [49306 49384])
            ("record-type-descriptor" function (:arguments ("obj")) nil [49387 49502])
            (49505 49522)
            (49547 49580)
            (49604 49702)
            (49704 49779)
            (49781 49844)
            ("list-index" function (:arguments ("l" "k")) nil [49866 50037])
            ("primitive-load-path" code nil nil [50136 50170])
            ("if" code nil nil [50173 50241])
            ("file-exists?" variable (:default-value ((50333 . 50622))) nil [50310 50622])
            ("file-is-directory?" variable (:default-value ((50654 . 51057))) nil [50625 51057])
            ("system-error-errno" function (:arguments ("args")) nil [51060 51170])
            ("error" variable (:default-value ((51218 . 51442))) nil [51202 51442])
            ("tm:sec" function (:arguments ("obj")) nil [51475 51514])
            ("tm:min" function (:arguments ("obj")) nil [51516 51555])
            ("tm:hour" function (:arguments ("obj")) nil [51557 51597])
            ("tm:mday" function (:arguments ("obj")) nil [51599 51639])
            ("tm:mon" function (:arguments ("obj")) nil [51641 51680])
            ("tm:year" function (:arguments ("obj")) nil [51682 51722])
            ("tm:wday" function (:arguments ("obj")) nil [51724 51764])
            ("tm:yday" function (:arguments ("obj")) nil [51766 51806])
            ("tm:isdst" function (:arguments ("obj")) nil [51808 51849])
            ("tm:gmtoff" function (:arguments ("obj")) nil [51851 51893])
            ("tm:zone" function (:arguments ("obj")) nil [51895 51936])
            ("set-tm:sec" function (:arguments ("obj" "val")) nil [51939 51991])
            ("set-tm:min" function (:arguments ("obj" "val")) nil [51993 52045])
            ("set-tm:hour" function (:arguments ("obj" "val")) nil [52047 52100])
            ("set-tm:mday" function (:arguments ("obj" "val")) nil [52102 52155])
            ("set-tm:mon" function (:arguments ("obj" "val")) nil [52157 52209])
            ("set-tm:year" function (:arguments ("obj" "val")) nil [52211 52264])
            ("set-tm:wday" function (:arguments ("obj" "val")) nil [52266 52319])
            ("set-tm:yday" function (:arguments ("obj" "val")) nil [52321 52374])
            ("set-tm:isdst" function (:arguments ("obj" "val")) nil [52376 52430])
            ("set-tm:gmtoff" function (:arguments ("obj" "val")) nil [52432 52487])
            ("set-tm:zone" function (:arguments ("obj" "val")) nil [52489 52543])
            ("tms:clock" function (:arguments ("obj")) nil [52546 52588])
            ("tms:utime" function (:arguments ("obj")) nil [52590 52632])
            ("tms:stime" function (:arguments ("obj")) nil [52634 52676])
            ("tms:cutime" function (:arguments ("obj")) nil [52678 52721])
            ("tms:cstime" function (:arguments ("obj")) nil [52723 52766])
            ("file-position" variable (:default-value ("ftell")) nil [52810 52837])
            ("define*" code nil nil [52839 52936])
            ("move->fdes" function (:arguments ("fd/port" "fd")) nil [52939 53184])
            ("release-port-handle" function (:arguments ("port")) nil [53187 53336])
            ("dup->port" variable (:default-value ((53359 . 53568))) nil [53339 53568])
            ("dup->inport" variable (:default-value ((53593 . 53710))) nil [53571 53710])
            ("dup->outport" variable (:default-value ((53736 . 53853))) nil [53713 53853])
            ("dup" variable (:default-value ((53870 . 54150))) nil [53856 54150])
            ("duplicate-port" function (:arguments ("port" "modes")) nil [54153 54213])
            ("fdes->inport" function (:arguments ("fdes")) nil [54216 54673])
            ("fdes->outport" function (:arguments ("fdes")) nil [54676 55135])
            ("port->fdes" function (:arguments ("port")) nil [55138 55218])
            ("setenv" function (:arguments ("name" "value")) nil [55237 55343])
            ("unsetenv" function (:arguments ("name")) nil [55346 55421])
            ("let-syntax" code nil nil [55465 57802])
            ("in-vicinity" function (:arguments ("vicinity" "file")) nil [57805 58201])
            ("command-line" function nil nil [58421 58463])
            ("load-user-init" function nil nil [58562 58891])
            (58961 59322)
            ("define-syntax-rule" code nil nil [59324 59402])
            ("load-from-path" function (:arguments ("name")) nil [59618 59717])
            ("define-syntax-rule" code nil nil [59720 59919])
            ("assert-load-verbosity" function (:arguments ("v")) nil [59950 60008])
            (60011 60263)
            ("read-eval?" variable (:default-value ((60394 . 60409))) nil [60375 60409])
            (64979 65239)
            ("letrec-syntax" code nil nil [65241 71194])
            ("define*" code nil nil [71352 72164])
            ("module-observe" function nil nil [72200 72307])
            ("define*" code nil nil [72331 73022])
            (73289 73323)
            ("module-defer-observers-mutex" variable (:default-value ((73361 . 73384))) nil [73324 73384])
            ("module-defer-observers-table" variable (:default-value ((73423 . 73440))) nil [73386 73440])
            ("module-modified" function (:arguments ("m")) nil [73443 73584])
            ("call-with-deferred-observers" function (:arguments ("thunk")) nil [73734 74224])
            ("module-call-observers" function (:arguments ("m")) nil [74227 74319])
            ("module-search" function (:arguments ("fn" "m" "v")) nil [75493 75642])
            ("module-locally-bound?" function (:arguments ("m" "v")) nil [75983 76107])
            ("module-bound?" function (:arguments ("m" "v")) nil [76234 76344])
            ("module-obarray-get-handle" function (:arguments ("ob" "key")) nil [76929 77034])
            ("module-obarray-ref" function (:arguments ("ob" "key")) nil [77037 77121])
            ("module-obarray-set!" function (:arguments ("ob" "key" "val")) nil [77124 77219])
            ("module-obarray-remove!" function (:arguments ("ob" "key")) nil [77222 77318])
            ("module-symbol-locally-interned?" function (:arguments ("m" "v")) nil [77574 77682])
            ("module-symbol-interned?" function (:arguments ("m" "v")) nil [77931 78022])
            (79192 79467)
            (79741 79996)
            ("module-make-local-var!" function (:arguments ("m" "v")) nil [80271 80746])
            ("module-ensure-local-variable!" function nil nil [80972 81168])
            ("module-add!" function (:arguments ("m" "v" "var")) nil [81277 81383])
            ("module-remove!" function (:arguments ("m" "v")) nil [81619 81695])
            ("module-clear!" function (:arguments ("m")) nil [81720 81780])
            ("module-for-each" function (:arguments ("proc")) nil [81918 82002])
            ("module-map" function (:arguments ("proc")) nil [82005 82085])
            ("module-ref-submodule" function nil nil [82340 82536])
            ("module-define-submodule!" function nil nil [82539 82652])
            ("begin-deprecated" code nil nil [82948 83836])
            ("save-module-excursion" function (:arguments ("thunk")) nil [83874 84372])
            (84641 84966)
            ("module-set!" function nil nil [85143 85342])
            ("module-define!" function nil nil [85486 85789])
            ("module-defined?" function nil nil [85909 86043])
            ("module-use!" function nil nil [86143 86672])
            ("module-use-interfaces!" function nil nil [86839 87404])
            ("nested-ref" function (:arguments ("root" "names")) nil [88983 89345])
            ("nested-set!" function (:arguments ("root" "names" "val")) nil [89348 89712])
            ("nested-define!" function (:arguments ("root" "names" "val")) nil [89715 90085])
            ("nested-remove!" function (:arguments ("root" "names")) nil [90088 90450])
            ("nested-ref-module" function (:arguments ("root" "names")) nil [90454 90699])
            ("nested-define-module!" function (:arguments ("root" "names")) nil [90702 91481])
            ("local-ref" function (:arguments ("names")) nil [91485 91548])
            ("local-set!" function (:arguments ("names" "val")) nil [91551 91624])
            ("local-define" function (:arguments ("names" "val")) nil [91627 91705])
            ("local-remove" function (:arguments ("names")) nil [91708 91778])
            ("local-ref-module" function (:arguments ("names")) nil [91781 91858])
            ("local-define-module" function (:arguments ("names" "mod")) nil [91861 91953])
            ("the-root-module" variable (:default-value ((92594 . 92890))) nil [92568 92890])
            ("the-scm-module" variable (:default-value ((93046 . 93309))) nil [93021 93309])
            ("set-module-public-interface!" code nil nil [93312 93372])
            (93501 93659)
            ("module-generate-unique-id!" function (:arguments ("m")) nil [93661 93788])
            (93934 93960)
            (93961 93992)
            (93993 94019)
            (94020 94068)
            ("set-current-module" code nil nil [94174 94209])
            ("module-name" variable (:default-value ((94312 . 94817))) nil [94290 94817])
            ("define*" code nil nil [94820 95349])
            ("make-modules-in" function nil nil [95352 95623])
            ("beautify-user-module!" function nil nil [95626 96063])
            ("version-matches?" function (:arguments ("version-ref" "target")) nil [96293 97125])
            ("make-fresh-user-module" function nil nil [97475 97571])
            ("resolve-module" variable (:default-value ((97655 . 98725))) nil [97630 98725])
            ("try-load-module" function (:arguments ("name" "version")) nil [98729 98804])
            ("reload-module" function (:arguments ("m")) nil [98807 98897])
            ("purify-module!" function nil nil [99281 99388])
            ("define*" code nil nil [100855 103267])
            ("symbol-prefix-proc" function (:arguments ("prefix")) nil [103270 103359])
            ("define*" code nil nil [103469 106684])
            ("module-defined-hook" variable (:default-value ((106861 . 106874))) nil [106833 106874])
            ("make-autoload-interface" function nil nil [106900 107874])
            (107877 108618)
            (108763 108797)
            ("define*" code nil nil [108916 111182])
            (111226 111268)
            ("autoload-done-or-in-progress?" function (:arguments ("p" "m")) nil [111270 111431])
            ("autoload-done!" function (:arguments ("p" "m")) nil [111434 111653])
            ("autoload-in-progress!" function (:arguments ("p" "m")) nil [111656 111843])
            ("set-autoloaded!" function (:arguments ("p" "m" "done?")) nil [111846 112078])
            ("define-syntax" code nil nil [112112 113604])
            ("define-option-interface" code nil nil [113607 113721])
            ("define-option-interface" code nil nil [113724 113833])
            ("define-option-interface" code nil nil [113836 113950])
            ("unspecified?" function (:arguments ("v")) nil [114280 114326])
            ("define*" code nil nil [114552 115773])
            ("define*" code nil nil [115776 116461])
            ("parameter?" function (:arguments ("x")) nil [116464 116542])
            ("parameter-fluid" function (:arguments ("p")) nil [116545 116720])
            ("parameter-converter" function (:arguments ("p")) nil [116723 116902])
            ("define-syntax" code nil nil [116905 117446])
            ("let" code nil nil [117493 118401])
            ("current-language" variable (:default-value ((118553 . 118577))) nil [118528 118577])
            ("batch-mode?" function nil nil [118857 118913])
            ("ensure-batch-mode!" function nil nil [119134 119198])
            (119201 119250)
            ("exit" variable (:default-value ("quit")) nil [119252 119269])
            ("gc-run-time" function nil nil [119272 119334])
            ("abort-hook" variable (:default-value ((119356 . 119367))) nil [119337 119367])
            ("before-error-hook" variable (:default-value ((119395 . 119406))) nil [119369 119406])
            ("after-error-hook" variable (:default-value ((119433 . 119444))) nil [119408 119444])
            ("before-backtrace-hook" variable (:default-value ((119476 . 119487))) nil [119446 119487])
            ("after-backtrace-hook" variable (:default-value ((119518 . 119529))) nil [119489 119529])
            ("before-read-hook" variable (:default-value ((119557 . 119568))) nil [119532 119568])
            ("after-read-hook" variable (:default-value ((119594 . 119605))) nil [119570 119605])
            ("before-eval-hook" variable (:default-value ((119632 . 119645))) nil [119607 119645])
            ("after-eval-hook" variable (:default-value ((119671 . 119684))) nil [119647 119684])
            ("before-print-hook" variable (:default-value ((119712 . 119725))) nil [119686 119725])
            ("after-print-hook" variable (:default-value ((119752 . 119765))) nil [119727 119765])
            ("exit-hook" variable (:default-value ((119854 . 119865))) nil [119836 119865])
            ("repl-reader" variable (:default-value ((119985 . 121283))) nil [119963 121283])
            ("iota" function (:arguments ("n")) nil [121345 121478])
            ("define-syntax" code nil nil [121652 123103])
            ("eval-when" code nil nil [123262 123377])
            ("keyword-like-symbol->keyword" function (:arguments ("sym")) nil [123380 123494])
            (123497 128565)
            ("process-use-modules" function (:arguments ("module-interface-args")) nil [128809 129200])
            ("define-syntax" code nil nil [129203 130927])
            ("define-syntax-rule" code nil nil [130930 131156])
            ("include-from-path" code nil nil [131159 131200])
            ("define-syntax-rule" code nil nil [131203 131266])
            ("define-syntax" code nil nil [131269 131497])
            ("define-syntax-rule" code nil nil [131500 131625])
            ("define-syntax-rule" code nil nil [131669 131737])
            ("module-export!" function (:arguments ("m" "names")) nil [131877 132293])
            ("module-replace!" function (:arguments ("m" "names")) nil [132296 132872])
            ("module-export-all!" function (:arguments ("mod")) nil [132922 133223])
            ("module-re-export!" function (:arguments ("m" "names")) nil [133406 134109])
            ("define-syntax-rule" code nil nil [134112 134287])
            ("define-syntax-rule" code nil nil [134290 134471])
            ("define-syntax-rule" code nil nil [134474 134651])
            ("define-syntax-rule" code nil nil [134654 134718])
            ("define-syntax-rule" code nil nil [134721 134791])
            ("define*" code nil nil [134819 135033])
            ("duplicate-handlers" variable (:default-value ((135681 . 137960))) nil [135652 137960])
            ("lookup-duplicates-handlers" function (:arguments ("handler-names")) nil [137963 138379])
            ("default-duplicate-binding-procedures" variable (:default-value ((138429 . 138456))) nil [138382 138456])
            ("default-duplicate-binding-handler" variable (:default-value ((138503 . 138800))) nil [138459 138800])
            ("define*" code nil nil [139898 146394])
            (146397 146854)
            ("cond-expand-provide" function nil nil [148996 149256])
            ("define-syntax" code nil nil [149259 150513])
            ("use-srfis" function (:arguments ("srfis")) nil [150658 150866])
            ("define-syntax" code nil nil [150908 151516])
            ("define-syntax" code nil nil [151574 153101])
            ("using-readline?" variable (:default-value ((153133 . 153301))) nil [153107 153301])
            ("begin-deprecated" code nil nil [153335 153422])
            ("module-use!" code nil nil [153538 153600])
            ("let" code nil nil [153836 154317])
            ("eval-when" code nil nil [154635 154692]))          
      :file "boot-9.scm"
      :pointmax 154720
      :fsize 154720
      :lastmodtime '(22692 50371 0 0)
      :unmatched-syntax '((semantic-list 154415 . 154517) (semantic-list 148854 . 148902) (semantic-list 147810 . 148780) (semantic-list 139697 . 139896) (semantic-list 118609 . 118647) (semantic-list 114500 . 114550) (semantic-list 114355 . 114499) (semantic-list 114216 . 114278) (semantic-list 73025 . 73287) (semantic-list 60411 . 60691) (semantic-list 60265 . 60297) (semantic-list 59922 . 59949) (semantic-list 12900 . 12924))))
  :file "!usr!share!guile!2.0!ice-9!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
