;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode scheme-mode
      :tags 
        '( ("let" code nil nil [814 9376]))          
      :file "mklibcat.scm"
      :pointmax 9378
      :fsize 9377
      :lastmodtime '(22313 11945 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode scheme-mode
      :tags 
        '( ("cond-expand" code nil nil [159 234])
            ("slib-module" variable (:default-value ((4314 . 4330))) nil [4294 4330])
            ("module-export-all!" code nil nil [4333 4369])
            ("software-type" function nil nil [4498 4523])
            ("scheme-implementation-type" function nil nil [4638 4676])
            ("scheme-implementation-home-page" function nil nil [4862 4942])
            ("scheme-implementation-version" variable (:default-value ("version")) nil [5076 5121])
            ("implementation-vicinity" variable (:default-value ((5314 . 5415))) nil [5280 5415])
            ("library-vicinity" variable (:default-value ((5574 . 5864))) nil [5547 5864])
            ("home-vicinity" function nil nil [6048 6336])
            ("user-vicinity" function nil nil [6341 6369])
            ("vicinity:suffix?" variable (:default-value ((6401 . 6534))) nil [6374 6534])
            ("pathname->vicinity" function (:arguments ("pathname")) nil [6539 6764])
            ("program-vicinity" variable (:default-value ((6796 . 6840))) nil [6769 6840])
            ("sub-vicinity" variable (:default-value ((6868 . 7093))) nil [6845 7093])
            ("with-load-pathname" function (:arguments ("path" "thunk")) nil [7148 7242])
            (7359 9859)
            ("define*" code nil nil [9894 9993])
            (10027 10064)
            (10098 10136)
            ("system" function (:arguments ("str")) nil [10463 10522])
            ("define*" code nil nil [10648 11047])
            ("delete-file" function (:arguments ("filename")) nil [11050 11141])
            ("make-exchanger" function (:arguments ("obj")) nil [11144 11226])
            ("open-file" function (:arguments ("filename" "modes")) nil [11228 11367])
            ("if" code nil nil [11490 11595])
            (11598 11904)
            ("browse-url" function (:arguments ("url")) nil [12083 12181])
            ("char-code-limit" variable (:default-value ((12697 . 12711))) nil [12673 12711])
            ("slib:eval" function (:arguments ("expression")) nil [12792 12868])
            ("slib:exit" variable (:default-value ("quit")) nil [12975 12997])
            ("scheme-file-suffix" variable (:default-value ((13033 . 13051))) nil [13003 13051])
            (13055 13225)
            ("slib:load-source" variable (:default-value ("slib:load")) nil [13361 13395])
            ("slib:load-compiled" variable (:default-value ("slib:load")) nil [13564 13600])
            ("defmacro:eval" variable (:default-value ("slib:eval")) nil [13603 13634])
            ("defmacro:load" variable (:default-value ("slib:load")) nil [13636 13667])
            ("defmacro:expand*" function (:arguments ("x")) nil [13670 13726])
            ("gentemp" variable (:default-value ((13773 . 13960))) nil [13755 13960])
            ("macro:eval" variable (:default-value ("slib:eval")) nil [14012 14040])
            ("macro:load" variable (:default-value ("slib:load-source")) nil [14042 14077])
            ("slib:warn" variable (:default-value ("warn")) nil [14080 14102])
            ("slib:error" variable (:default-value ("error")) nil [14104 14128])
            (14180 14203)
            (14204 14234)
            ("copy-bit" function (:arguments ("index" "to" "bool")) nil [14333 14476])
            ("bit-field" function (:arguments ("n" "start" "end")) nil [14478 14583])
            ("bitwise-if" function (:arguments ("mask" "n0" "n1")) nil [14585 14673])
            ("copy-bit-field" function (:arguments ("to" "from" "start" "end")) nil [14675 14836])
            ("rotate-bit-field" function (:arguments ("n" "count" "start" "end")) nil [14838 14913])
            ("log2-binary-factors" function (:arguments ("n")) nil [15244 15318])
            ("bit-reverse" function (:arguments ("k" "n")) nil [15320 15563])
            ("reverse-bit-field" function (:arguments ("n" "start" "end")) nil [15565 15635])
            ("define*" code nil nil [15843 16113])
            ("list->integer" function (:arguments ("bools")) nil [16115 16241])
            (16243 16303)
            ("arithmetic-shift" variable (:default-value ("ash")) nil [16326 16354])
            ("bitwise-ior" variable (:default-value ("logior")) nil [16356 16382])
            ("bitwise-xor" variable (:default-value ("logxor")) nil [16384 16410])
            ("bitwise-and" variable (:default-value ("logand")) nil [16412 16438])
            ("bitwise-not" variable (:default-value ("lognot")) nil [16440 16466])
            ("bit-set?" variable (:default-value ("logbit?")) nil [16498 16524])
            ("any-bits-set?" variable (:default-value ("logtest")) nil [16526 16555])
            ("first-set-bit" variable (:default-value ("log2-binary-factors")) nil [16557 16598])
            ("bitwise-merge" variable (:default-value ("bitwise-if")) nil [16600 16632])
            ("array-indexes" function (:arguments ("ra")) nil [16654 16777])
            ("array:copy!" function (:arguments ("dest" "source")) nil [16779 16848])
            ("make-array" variable (:default-value ((16968 . 17171))) nil [16947 17171])
            ("list->array" function (:arguments ("rank" "proto" "lst")) nil [17174 17363])
            (17824 18387)
            ("array->vector" function (:arguments ("ra")) nil [18388 18452])
            ("create-array" variable (:default-value ("make-array")) nil [18823 18854])
            ("make-uniform-wrapper" function (:arguments ("prot")) nil [18856 18947])
            ("ac64" variable (:default-value ((19135 . 19162))) nil [19122 19162])
            ("ac32" variable (:default-value ("ac64")) nil [19164 19181])
            ("ar64" variable (:default-value ((19196 . 19224))) nil [19183 19224])
            ("ar32" variable (:default-value ((19239 . 19266))) nil [19226 19266])
            ("as64" variable (:default-value ("vector")) nil [19268 19287])
            ("as32" variable (:default-value ((19302 . 19328))) nil [19289 19328])
            ("as16" variable (:default-value ("as32")) nil [19330 19347])
            ("as8" variable (:default-value ("as32")) nil [19349 19366])
            ("au64" variable (:default-value ("vector")) nil [19368 19387])
            ("au32" variable (:default-value ((19402 . 19428))) nil [19389 19428])
            ("au16" variable (:default-value ("au32")) nil [19430 19447])
            ("au8" variable (:default-value ("au32")) nil [19449 19466])
            ("at1" variable (:default-value ((19481 . 19507))) nil [19468 19507])
            ("A:floC128b" variable (:default-value ("ac64")) nil [19543 19566])
            ("A:floC64b" variable (:default-value ("ac64")) nil [19568 19590])
            ("A:floC32b" variable (:default-value ("ac32")) nil [19592 19614])
            ("A:floC16b" variable (:default-value ("ac32")) nil [19616 19638])
            ("A:floR128b" variable (:default-value ("ar64")) nil [19640 19663])
            ("A:floR64b" variable (:default-value ("ar64")) nil [19665 19687])
            ("A:floR32b" variable (:default-value ("ar32")) nil [19689 19711])
            ("A:floR16b" variable (:default-value ("ar32")) nil [19713 19735])
            ("A:floR128d" variable (:default-value ("ar64")) nil [19756 19779])
            ("A:floR64d" variable (:default-value ("ar64")) nil [19781 19803])
            ("A:floR32d" variable (:default-value ("ar32")) nil [19805 19827])
            ("A:fixZ64b" variable (:default-value ("as64")) nil [19840 19862])
            ("A:fixZ32b" variable (:default-value ("as32")) nil [19864 19886])
            ("A:fixZ16b" variable (:default-value ("as16")) nil [19888 19910])
            ("A:fixZ8b" variable (:default-value ("as8")) nil [19912 19933])
            ("A:fixN64b" variable (:default-value ("au64")) nil [19935 19957])
            ("A:fixN32b" variable (:default-value ("au32")) nil [19959 19981])
            ("A:fixN16b" variable (:default-value ("au16")) nil [19983 20005])
            ("A:fixN8b" variable (:default-value ("au8")) nil [20007 20028])
            ("A:bool" variable (:default-value ("at1")) nil [20030 20051])
            ("a:floc128b" variable (:default-value ("ac64")) nil [20099 20122])
            ("a:floc64b" variable (:default-value ("ac64")) nil [20124 20146])
            ("a:floc32b" variable (:default-value ("ac32")) nil [20148 20170])
            ("a:floc16b" variable (:default-value ("ac32")) nil [20172 20194])
            ("a:flor128b" variable (:default-value ("ar64")) nil [20196 20219])
            ("a:flor64b" variable (:default-value ("ar64")) nil [20221 20243])
            ("a:flor32b" variable (:default-value ("ar32")) nil [20245 20267])
            ("a:flor16b" variable (:default-value ("ar32")) nil [20269 20291])
            ("a:flor128d" variable (:default-value ("ar64")) nil [20312 20335])
            ("a:flor64d" variable (:default-value ("ar64")) nil [20337 20359])
            ("a:flor32d" variable (:default-value ("ar32")) nil [20361 20383])
            ("a:fixz64b" variable (:default-value ("as64")) nil [20396 20418])
            ("a:fixz32b" variable (:default-value ("as32")) nil [20420 20442])
            ("a:fixz16b" variable (:default-value ("as16")) nil [20444 20466])
            ("a:fixz8b" variable (:default-value ("as8")) nil [20468 20489])
            ("a:fixn64b" variable (:default-value ("au64")) nil [20491 20513])
            ("a:fixn32b" variable (:default-value ("au32")) nil [20515 20537])
            ("a:fixn16b" variable (:default-value ("au16")) nil [20539 20561])
            ("a:fixn8b" variable (:default-value ("au8")) nil [20563 20584])
            ("a:bool" variable (:default-value ("at1")) nil [20586 20607])
            (20631 20937)
            ("random:chunk" function (:arguments ("sta")) nil [20938 20981])
            (20984 20997)
            (20998 21013)
            ("slib:load" code nil nil [21110 21163]))          
      :file "guile-2.init"
      :pointmax 21165
      :fsize 21164
      :lastmodtime '(22313 11945 0 0)
      :unmatched-syntax '((semantic-list 21093 . 21108) (semantic-list 21079 . 21092) (semantic-list 21065 . 21078) (semantic-list 21049 . 21064) (semantic-list 21035 . 21048) (semantic-list 14267 . 14289) (semantic-list 14247 . 14266) (semantic-list 7098 . 7144) (semantic-list 237 . 4292) (semantic-list 7098 . 7144) (semantic-list 237 . 4292) (semantic-list 7098 . 7144) (semantic-list 237 . 4292) (semantic-list 7098 . 7144) (semantic-list 237 . 4292))))
  :file "!usr!share!slib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
